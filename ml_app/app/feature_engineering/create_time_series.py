import pandas as pd
from dask import delayed, compute
from fbprophet import Prophet


def process_all_time_series(df, time_index, target, all_features):
    """
    Summary
    -------
    Groups a dataframe and generates a time series using Prophet for each group
    via the create_single_time_series function which is delayed and processed
    in parallel via Dask.

    This outputs a list of dictionary records which is then convered to a
    pandas dataframe and returned.

    Parameters
    ----------
    df: pandas.DataFrame
        The dataframe containing the records to generate a time series for.

    Returns
    -------
    df: pandas.DataFrame
        A pandas dataframe containing the base features alongside the output
        from the Prophet predict method.

    Example
    --------
    df = process_all_time_series(df)

    """
    df = df.rename({
        time_index: 'ds',
        target: 'y'
    }, axis=1)

    # Group the dataframe
    df_grouped = df.groupby(all_features)

    # Blank output list to append results to
    time_series_output = []

    # Iterate through the groups and generate time series for each
    for group in df_grouped.groups:
        df = df_grouped.get_group(group)
        ts_dict = create_single_time_series(df)
        time_series_output.append(ts_dict)

    # Compute the delayed output list
    time_series_output = compute(time_series_output)

    # Convert the output list to a dataframe
    df = (
        pd.from_dict(data=time_series_output, orient='records')
        .rename({
            'ds': time_index,
            'y': target
        }, axis=1)
        .set_index(time_index)
    )

    return df


@delayed
def create_single_time_series(df):
    """
    Summary
    -------
    Creates a single monthly time series using Prophet for the supplied
    dataframe and returns the prediction for the next month alongside the
    output from the Prophet predict method.

    Delayed via Dask.

    Parameters
    ----------
    df: pandas.DataFrame
        A group within a dataframe to create a time series for.

    Returns
    -------
    ts_dict: dict
        A dictionary in records format containing the input data alongside the
        output generated by Prophhet.

    Example
    --------
    for group in df_grouped.groups:
        df = df_grouped.get_group(group)
        ts_dict = create_single_time_series(df)
        output.append(ts_dict)
    """

    model = Prophet(
        weekly_seasonality=False,
        daily_seasonality=False,
        yearly_seasonality=True,
    )

    model.add_seasonality(
        name='monthly',
        period=30.5,
        fourier_order=5
    )
    model.fit(df)

    future = model.make_future_dataframe(periods=1)
    df_preds = model.predict(future)

    ts_dict = pd.merge(
        left=df,
        right=df_preds,
        on='ds',
        how='outer'
    ).to_dict(orient='records')

    return ts_dict
